package --PACKAGE--.donotmodify;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.bizosys.hsearch.byteutils.SortedBytesArray;
import com.bizosys.hsearch.byteutils.SortedBytesDouble;
import com.bizosys.hsearch.byteutils.SortedBytesLong;
import com.bizosys.hsearch.byteutils.SortedBytesFloat;
import com.bizosys.hsearch.byteutils.SortedBytesInteger;
import com.bizosys.hsearch.byteutils.SortedBytesUnsignedShort;
import com.bizosys.hsearch.byteutils.SortedBytesChar;
import com.bizosys.hsearch.byteutils.SortedBytesBoolean;
import com.bizosys.hsearch.byteutils.SortedBytesString;
import com.bizosys.hsearch.byteutils.Storable;

import --PACKAGE--.*;

--IMPORT-CELLS--
import com.bizosys.hsearch.treetable.BytesSection;
import com.bizosys.hsearch.treetable.Cell2Visitor;
import com.bizosys.hsearch.treetable.CellBase;

import com.bizosys.hsearch.treetable.client.HSearchQuery;
import com.bizosys.hsearch.treetable.client.IHSearchPlugin;
import com.bizosys.hsearch.treetable.client.IHSearchTable;

import com.bizosys.hsearch.treetable.unstructured.*;

import com.bizosys.hsearch.treetable.CellComparator;
import com.bizosys.hsearch.treetable.CellComparator.BooleanComparator;
import com.bizosys.hsearch.treetable.CellComparator.ByteComparator;
import com.bizosys.hsearch.treetable.CellComparator.BytesComparator;
import com.bizosys.hsearch.treetable.CellComparator.ShortComparator;
import com.bizosys.hsearch.treetable.CellComparator.IntegerComparator;
import com.bizosys.hsearch.treetable.CellComparator.FloatComparator;
import com.bizosys.hsearch.treetable.CellComparator.LongComparator;
import com.bizosys.hsearch.treetable.CellComparator.DoubleComparator;
import com.bizosys.hsearch.treetable.CellComparator.StringComparator;
import com.bizosys.hsearch.treetable.ValueComparator;
import com.bizosys.hsearch.util.EmptyMap;

public final class HSearchTable--COLUMN-NAME-- implements IHSearchTable {
	
	public static boolean DEBUG_ENABLED = false;
	
	public static final int MODE_COLS = 0;
    public static final int MODE_KEY = 1;
    public static final int MODE_VAL = 2;
    public static final int MODE_KEYVAL = 3;
	
	
	--CELL-CLASS--
	
	public static final class Cell2Map extends EmptyMap<--VAL-PARENT-DATATYPE--, Cell2<--KEY_DATATYPE--, --VAL_DATATYPE-->> {

		public HSearchQuery query;
		public --CELLMAX_MINUS_1-SIGN-- matchingCell--CELL-MAX-MINUS-1--;
		public --CELLMAX_MINUS_1-SIGN-- cellMin--CELL-MAX-MINUS-1--;
		public --CELLMAX_MINUS_1-SIGN-- cellMax--CELL-MAX-MINUS-1--;
		public --CELLMAX_MINUS_1-SIGN--[] inValues--CELL-MAX-MINUS-1--;
		public Cell2FilterVisitor cell2Visitor;
		
		public Cell2Map(final HSearchQuery query, final Cell2FilterVisitor cell2Visitor,
			final --CELLMAX_MINUS_1-SIGN-- matchingCell--CELL-MAX-MINUS-1--, final --CELLMAX_MINUS_1-SIGN-- cellMin--CELL-MAX-MINUS-1--, final --CELLMAX_MINUS_1-SIGN-- cellMax--CELL-MAX-MINUS-1--, final --CELLMAX_MINUS_1-SIGN--[] inValues--CELL-MAX-MINUS-1--) {
			this.query = query;
			this.cell2Visitor = cell2Visitor;

			this.matchingCell--CELL-MAX-MINUS-1-- = matchingCell--CELL-MAX-MINUS-1--;
			this.cellMin--CELL-MAX-MINUS-1-- = cellMin--CELL-MAX-MINUS-1--;
			this.cellMax--CELL-MAX-MINUS-1-- = cellMax--CELL-MAX-MINUS-1--;
			this.inValues--CELL-MAX-MINUS-1-- = inValues--CELL-MAX-MINUS-1--;
		}
		
		@Override
		public final Cell2<--KEY_DATATYPE--, --VAL_DATATYPE--> put(final --VAL-PARENT-DATATYPE-- key, final Cell2<--KEY_DATATYPE--, --VAL_DATATYPE--> value) {
			
			try {
				cell2Visitor.cell2Key = key;
				Cell2<--KEY_DATATYPE--, --VAL_DATATYPE--> cell2Val = value;

				if (query.filterCells[--CELL-MAX-MINUS-1--]) {
					if(query.notValCells[--CELL-MAX-MINUS-1--])
						cell2Val.processNot(matchingCell--CELL-MAX-MINUS-1--, cell2Visitor);
					else if(query.inValCells[--CELL-MAX-MINUS-1--])
						cell2Val.processIn(inValues--CELL-MAX-MINUS-1--, cell2Visitor);
					else 
						cell2Val.process(matchingCell--CELL-MAX-MINUS-1--, cellMin--CELL-MAX-MINUS-1--, cellMax--CELL-MAX-MINUS-1--,cell2Visitor);
				} else {
					cell2Val.process(cell2Visitor);
				}
				return value;
			} catch (IOException e) {
				throw new IndexOutOfBoundsException(e.getMessage());
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////	
	
	public static final class Cell2FilterVisitor implements Cell2Visitor<--KEY_DATATYPE--, --VAL_DATATYPE--> {
		public HSearchQuery query;
		public IHSearchPlugin plugin;

		public Plugin--COLUMN-NAME--Base.TablePartsCallback tablePartsCallback = null;

		public --CELLMAX_MINUS_2-SIGN-- matchingCell--CELL-MAX-MINUS-2--;
		public --CELLMAX_MINUS_2-SIGN-- cellMin--CELL-MAX-MINUS-2--;
		public --CELLMAX_MINUS_2-SIGN-- cellMax--CELL-MAX-MINUS-2--;
		public --CELLMAX_MINUS_2-SIGN--[] inValues--CELL-MAX-MINUS-2--;

		--TREE-NODE-KEY-SIGN--
		public int mode = MODE_COLS;
        public Cell2FilterVisitor(final HSearchQuery query, final IHSearchPlugin plugin, final Plugin--COLUMN-NAME--Base.TablePartsCallback tablePartsCallback, final int mode) {
			
            this.query = query;
            this.plugin = plugin;
            this.tablePartsCallback = tablePartsCallback;
            this.mode = mode;

        }
		
		public final void set(final --CELLMAX_MINUS_2-SIGN-- matchingCell--CELL-MAX-MINUS-2--, final --CELLMAX_MINUS_2-SIGN-- cellMin--CELL-MAX-MINUS-2--, final --CELLMAX_MINUS_2-SIGN-- cellMax--CELL-MAX-MINUS-2--, final --CELLMAX_MINUS_2-SIGN--[] inValues--CELL-MAX-MINUS-2--) {
			this.matchingCell--CELL-MAX-MINUS-2-- = matchingCell--CELL-MAX-MINUS-2--;
			this.cellMin--CELL-MAX-MINUS-2-- = cellMin--CELL-MAX-MINUS-2--;
			this.cellMax--CELL-MAX-MINUS-2-- = cellMax--CELL-MAX-MINUS-2--;
			this.inValues--CELL-MAX-MINUS-2-- = inValues--CELL-MAX-MINUS-2--;
		}
		
		
		
		@Override
		public final void visit(final --KEY_DATATYPE-- cell1Key, final --VAL_DATATYPE-- cell1Val) {

			//Is it all or not.
			if (query.filterCells[--CELL-MAX-MINUS-2--]) {
				
				//IS it exact or not
				if (null != matchingCell--CELL-MAX-MINUS-2--) {
					if ( query.notValCells[--CELL-MAX-MINUS-2--] ) {
						//Exact val match
						if (matchingCell--CELL-MAX-MINUS-2----COMPARE-BY-VALUE-EQUAL--) return;
					} else {
						//Not Exact val 
						if (matchingCell--CELL-MAX-MINUS-2----COMPARE-BY-VALUE--) return;
					}
				} else {
					//Either range or IN
					if ( query.inValCells[--CELL-MAX-MINUS-2--]) {
						//IN
						boolean isMatched = false;
						//LOOKING FOR ONE MATCHING
						for ( Object obj : query.inValuesAO[--CELL-MAX-MINUS-2--]) {
							--CELLMAX_MINUS_2-SIGN-- objI = (--CELLMAX_MINUS_2-SIGN--) obj;
							isMatched = --IN-VALUE-EQUAL--
							
							//ONE MATCHED, NO NEED TO PROCESS
							if ( query.notValCells[--CELL-MAX-MINUS-2--] ) { 
								if (!isMatched ) break; 
							} else {
								if (isMatched ) break;
							}
						}
						if ( !isMatched ) return; //NONE MATCHED
						
					} else {
						//RANGE
						boolean isMatched = cell1Key.--ABS-VALUE-- < cellMin--CELL-MAX-MINUS-2--.--ABS-VALUE-- || 
											cell1Key.--ABS-VALUE-- > cellMax--CELL-MAX-MINUS-2--.--ABS-VALUE--;
						if ( query.notValCells[--CELL-MAX-MINUS-2--] ) {
							//Not Exact Range
							if (!isMatched ) return;
						} else {
							//Exact Range
							if (isMatched ) return;
						}
					}
				}
			}

			if (null != plugin) {
            	switch (this.mode) {
            		case MODE_COLS :
            			tablePartsCallback.map(--TREE-NODE-KEYS--cell1Key, cell1Val);
            			break;

            		case MODE_KEY :
            			tablePartsCallback.map(cell1Key);
            			break;
            		case MODE_KEYVAL :
            			tablePartsCallback.map(cell1Key, cell1Val);
            			break;
            		case MODE_VAL:
            			tablePartsCallback.map(cell1Val);
            			break;
            	}
			} 
		}
	}	
	
	///////////////////////////////////////////////////////////////////	

	--CELLMAX-SIGN-- table = createBlankTable();

	public HSearchTable--COLUMN-NAME--() {
	}
	
	public final --CELLMAX-SIGN-- createBlankTable() {
		return new --CELLMAX-SIGN--
			(
				--CELL-SORTERS--
			);
	}

	public final byte[] toBytes() throws IOException {
		if ( null == table) return null;
		return table.toBytes(new --VAL-COMPARATOR--<--KEY_DATATYPE-->());
	}

	public final void put (--PUT-PARAMS-SIGNS--) {
		table.put( --PUT-PARAMS-- );
	}
	
    @Override
    public final void get(final byte[] input, final HSearchQuery query, final IHSearchPlugin pluginI) throws IOException, NumberFormatException {
    	iterate(input, query, pluginI, MODE_COLS);
    }

    @Override
    public final void keySet(final byte[] input, final HSearchQuery query, final IHSearchPlugin pluginI) throws IOException {
    	iterate(input, query, pluginI, MODE_KEY);
    }

    public final void values(final byte[] input, final HSearchQuery query, final IHSearchPlugin pluginI) throws IOException {
    	iterate(input, query, pluginI, MODE_VAL);
    }

    public final void keyValues(final byte[] input, final HSearchQuery query, final IHSearchPlugin pluginI) throws IOException {
    	iterate(input, query, pluginI, MODE_KEYVAL);
    }
    
    private final void iterate(final byte[] input, final HSearchQuery query, final IHSearchPlugin pluginI, final int mode) throws IOException, NumberFormatException {
    	
        Plugin--COLUMN-NAME--Base plugin = castPlugin(pluginI);
        Plugin--COLUMN-NAME--Base.TablePartsCallback callback = plugin.getPart();

        Cell2FilterVisitor cell2Visitor = new Cell2FilterVisitor(query, pluginI, callback, mode);

        query.parseValuesConcurrent(new String[]{--CELL-DATA--TYPES--});

--DEFINE-EXACT-FIRST--

--DEFINE-MIN-FIRST--

--DEFINE-MAX-FIRST--

--DEFINE-INVAL-FIRST--

		Cell--CELL-MAX-MINUS-1--Map cell--CELL-MAX-MINUS-1--L = new Cell--CELL-MAX-MINUS-1--Map(query, cell2Visitor--CELL-MAX-MINUS_1-PARAMS--);

        this.table.data = new BytesSection(input);
        if (query.filterCells[0]) {
			if(query.notValCells[0])
				this.table.getNotMap(matchingCell0, cell--CELL-MAX-MINUS-1--L);
			else if(query.inValCells[0])
				this.table.getInMap(inValues0, cell--CELL-MAX-MINUS-1--L);
			else	
				this.table.getMap(matchingCell0, cellMin0, cellMax0, cell--CELL-MAX-MINUS-1--L);
        } else {
            this.table.sortedList = cell--CELL-MAX-MINUS-1--L;
            this.table.parseElements();
        }

        if (null != callback) callback.close();
        if (null != plugin) plugin.onReadComplete();
    }

    public final Plugin--COLUMN-NAME--Base castPlugin(final IHSearchPlugin pluginI)
            throws IOException {
        Plugin--COLUMN-NAME--Base plugin = null;
        if (null != pluginI) {
            if (pluginI instanceof Plugin--COLUMN-NAME--Base) {
                plugin = (Plugin--COLUMN-NAME--Base) pluginI;
            }
            if (null == plugin) {
                throw new IOException("Invalid plugin Type :" + pluginI);
            }
        }
        return plugin;
    }

    /**
     * Free the cube data
     */
    public final void clear() throws IOException {
        if ( null !=  table.sortedList) table.sortedList.clear();
    }

}
	