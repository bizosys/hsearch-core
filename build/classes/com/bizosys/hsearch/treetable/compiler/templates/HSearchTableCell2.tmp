package --PACKAGE--.donotmodify;

import com.bizosys.hsearch.byteutils.SortedBytesArray;
import com.bizosys.hsearch.byteutils.SortedBytesChar;
import com.bizosys.hsearch.byteutils.SortedBytesFloat;
import com.bizosys.hsearch.byteutils.SortedBytesInteger;
import com.bizosys.hsearch.byteutils.SortedBytesUnsignedShort;
import com.bizosys.hsearch.treetable.BytesSection;
import com.bizosys.hsearch.treetable.Cell2;
import com.bizosys.hsearch.treetable.Cell2Visitor;
import com.bizosys.hsearch.treetable.CellComparator.*;
import com.bizosys.hsearch.treetable.client.HSearchQuery;
import com.bizosys.hsearch.treetable.client.IHSearchPlugin;
import com.bizosys.hsearch.treetable.client.IHSearchTable;

import java.io.IOException;

public class HSearchTable--COLUMN-NAME-- implements IHSearchTable {

    public static boolean DEBUG_ENABLED = false;
    
    public static final int MODE_COLS = 0;
    public static final int MODE_KEY = 1;
    public static final int MODE_VAL = 2;
    public static final int MODE_KEYVAL = 3;

    public static final class Cell2FilterVisitor implements Cell2Visitor<--KEY_DATATYPE--, --VAL_DATATYPE--> {

        public HSearchQuery query;
        public IHSearchPlugin plugin;
        public Plugin--COLUMN-NAME--Base.TablePartsCallback tablePartsCallback = null;

        public --KEY_DATATYPE-- matchingCell0;
        public --KEY_DATATYPE-- cellMin0;
        public --KEY_DATATYPE-- cellMax0;
        public --KEY_DATATYPE--[] inValues0;

        public --KEY_DATATYPE_PRIMITIVE-- cellFoundKey;

        public int mode = MODE_COLS;

        public Cell2FilterVisitor(HSearchQuery query,
                IHSearchPlugin plugin, Plugin--COLUMN-NAME--Base.TablePartsCallback tablePartsCallback, int mode) {

            this.query = query;
            this.plugin = plugin;
            this.tablePartsCallback = tablePartsCallback;
            this.mode = mode;

        }

        public void set(--KEY_DATATYPE-- matchingCell2, --KEY_DATATYPE-- cellMin2, --KEY_DATATYPE-- cellMax2, --KEY_DATATYPE--[] inValues2) {
            this.matchingCell0 = matchingCell2;
            this.cellMin0 = cellMin2;
            this.cellMax0 = cellMax2;
            this.inValues0 = inValues2;
        }

        @Override
        public final void visit(--KEY_DATATYPE-- cell1Key, --VAL_DATATYPE-- cell1Val) {
            			//Is it all or not.
			if (query.filterCells[0]) {
				
				//IS it exact or not
				if (null != matchingCell0) {
					if ( query.notValCells[0] ) {
						//Exact val match
						if (matchingCell0--COMPARE-BY-VALUE-EQUAL--) return;
					} else {
						//Not Exact val 
						if (matchingCell0--COMPARE-BY-VALUE--) return;
					}
				} else {
					//Either range or IN
					if ( query.inValCells[0]) {
						//IN
						boolean isMatched = false;
						//LOOKING FOR ONE MATCHING
						for ( Object obj : query.inValuesAO[0]) {
							--KEY_DATATYPE-- objI = (--KEY_DATATYPE--) obj;
							isMatched = --IN-VALUE-EQUAL--
							
							//ONE MATCHED, NO NEED TO PROCESS
							if ( query.notValCells[0] ) { 
								if (!isMatched ) break; 
							} else {
								if (isMatched ) break;
							}
						}
						if ( !isMatched ) return; //NONE MATCHED
						
					} else {
						//RANGE
						boolean isMatched = cell1Key.--ABS-VALUE-- < cellMin0.--ABS-VALUE-- || 
											cell1Key.--ABS-VALUE-- > cellMax0.--ABS-VALUE--;
						if ( query.notValCells[0] ) {
							//Not Exact Range
							if (!isMatched ) return;
						} else {
							//Exact Range
							if (isMatched ) return;
						}
					}
				}
			}
            
            if (null != plugin) {

            	switch (this.mode) {
            		case MODE_COLS :
            			tablePartsCallback.onRowCols(cell1Key, cell1Val);
            			break;

            		case MODE_KEY :
            			tablePartsCallback.onRowKey(cell1Key);
            			break;
            		case MODE_KEYVAL :
            			tablePartsCallback.onRowKeyValue(cell1Key, cell1Val);
            			break;
            		case MODE_VAL:
            			tablePartsCallback.onRowValue(cell1Val);
            			break;
            	}
                
            }
        }
    }
    ///////////////////////////////////////////////////////////////////	
    --CELLMAX-SIGN-- table = createBlankTable();

    public HSearchTable--COLUMN-NAME--() {
    }

    public --CELLMAX-SIGN-- createBlankTable() {
        return new --CELLMAX-SIGN--(--CELL-SORTERS--);
    }

    public byte[] toBytes() throws IOException {
        if (null == table) {
            return null;
        }
        table.sort(new --VAL-COMPARATOR--<Integer>());
        return table.toBytesOnSortedData();
    }

    public void put(--PUT-PARAMS-SIGNS--) {
        table.add(--PUT-PARAMS--);
    }

    @Override
    public void get(byte[] input, HSearchQuery query, IHSearchPlugin pluginI) throws IOException, NumberFormatException {
    	iterate(input, query, pluginI, MODE_COLS);
    }

    @Override
    public void keySet(byte[] input, HSearchQuery query, IHSearchPlugin pluginI) throws IOException {
    	iterate(input, query, pluginI, MODE_KEY);
    }

    public void values(byte[] input, HSearchQuery query, IHSearchPlugin pluginI) throws IOException {
    	iterate(input, query, pluginI, MODE_VAL);
    }

    public void keyValues(byte[] input, HSearchQuery query, IHSearchPlugin pluginI) throws IOException {
    	iterate(input, query, pluginI, MODE_KEYVAL);
    }
    
    private void iterate(byte[] input, HSearchQuery query, IHSearchPlugin pluginI, int mode) throws IOException, NumberFormatException {
    	
        Plugin--COLUMN-NAME--Base plugin = castPlugin(pluginI);
        Plugin--COLUMN-NAME--Base.TablePartsCallback callback = plugin.getPart();

        Cell2FilterVisitor cell2Visitor = new Cell2FilterVisitor(query, pluginI, callback, mode);

        query.parseValuesConcurrent(new String[]{"--KEY_DATATYPE--", "--VAL_DATATYPE--"});

--DEFINE-EXACT-FIRST--

--DEFINE-MIN-FIRST--

--DEFINE-MAX-FIRST--

--DEFINE-INVAL-FIRST--
	
		this.table.data = new BytesSection(input);
		if (query.filterCells[1]) {
			if(query.notValCells[1])
				this.table.processNot(matchingCell1, cell2Visitor);
			else if(query.inValCells[1])
				this.table.processIn(inValues1, cell2Visitor);
			else 
				this.table.process(matchingCell1, cellMin1, cellMax1,cell2Visitor);
		} else {
			this.table.process(cell2Visitor);
		}
		
        if (null != callback) {
            callback.onReadComplete();
        }
        if (null != plugin) {
            plugin.onReadComplete();
        }    	
    }

    public Plugin--COLUMN-NAME--Base castPlugin(IHSearchPlugin pluginI)
            throws IOException {
        Plugin--COLUMN-NAME--Base plugin = null;
        if (null != pluginI) {
            if (pluginI instanceof Plugin--COLUMN-NAME--Base) {
                plugin = (Plugin--COLUMN-NAME--Base) pluginI;
            }
            if (null == plugin) {
                throw new IOException("Invalid plugin Type :" + pluginI);
            }
        }
        return plugin;
    }

    /**
     * Free the cube data
     */
    public void clear() throws IOException {
        table.getMap().clear();
    }

}
