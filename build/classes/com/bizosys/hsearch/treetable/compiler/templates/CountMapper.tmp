package --PACKAGE--.donotmodify;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import --PACKAGE--.donotmodify.Plugin--COLUMN-NAME--Base.TablePartsCallback;

public final class CountMapper--COLUMN-NAME-- implements TablePartsCallback {

	private Plugin--COLUMN-NAME--Base<Map<--NP-KEY-DATATYPE--, Counter>> context = null;

	public static class Counter {
		public int counter = 1;
	}
	
	Map<--NP-KEY-DATATYPE--, Counter> idWithCounter = new HashMap<--NP-KEY-DATATYPE--, CountMapper--COLUMN-NAME--.Counter>();	
    
	public CountMapper--COLUMN-NAME--(final Plugin--COLUMN-NAME--Base<Map<--NP-KEY-DATATYPE--, Counter>> context) {
    	this.context = context;
    }
	
    @Override
    public final boolean map(final --KEY_DATATYPE-- id) {
    	System.out.println("Id:" + id);
    	if ( idWithCounter.containsKey(id)) idWithCounter.get(id).counter++;
    	else idWithCounter.put(id, new Counter());
        return true;
    }

    @Override
    public final boolean map(--ALL_COLS--) {
        return true;
    }

    @Override
    public final boolean map(final --KEY_DATATYPE-- key, final --VAL_DATATYPE-- value) {
        return true;
    }

    @Override
    public final boolean map(final --VAL_DATATYPE-- value) {
        return true;
    }

    @Override
    public final void close() throws IOException {
    	this.context.write(idWithCounter);
    	this.idWithCounter.clear();
    }
}
