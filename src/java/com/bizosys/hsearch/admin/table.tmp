/*
* Copyright 2010 Bizosys Technologies Limited
*
* Licensed to the Bizosys Technologies Limited (Bizosys) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The Bizosys licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.bizosys.hsearch.treetable;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import com.bizosys.hsearch.byteutils.ISortedByte;
import com.bizosys.hsearch.byteutils.SortedBytesArray;
import com.bizosys.hsearch.byteutils.SortedBytesInteger;
import com.bizosys.hsearch.byteutils.SortedBytesString;

public class Table--COLUMN_SIZE--<--COLUMNS--> {

	public static class Row<--COLUMNS--> {

--COLUMN_DECLARATION--
		public Row(--COLUMN_PARAMS--) {
--COLUMN_INITALIZATION--
		}
	}

	public static class RowIterator<--COLUMNS--> {

--ITERATORS_DECLARATION--		
		public RowIterator(--ITERATORS_PARAM--) {
--ITERATORS_INITALIZATION--
		}

		
		public Row<--COLUMNS--> next() {
			return new Row<--COLUMNS-->(--NEXT_ITERATORS_PARAM--);
		}
		
		public boolean hasNext() {
			return c1Itr.hasNext();
		}
	}

--BUILDER_DECLARATION--
	
--COLLECTION_DECLARATION--
		
	public Table--COLUMN_SIZE--(--BUILDER_PARAMS--) {
		
--BUILDER_INITALIZATION--
		
--COLLECTION_INITALIZATION--		
	}
	
	public Table--COLUMN_SIZE--(--BUILDER_PARAMS--, byte[] data) throws IOException {

--BUILDER_INITALIZATION--

		Collection<byte[]> cols = SortedBytesArray.getInstance().parse(data).values();
		Iterator<byte[]> colsItr = cols.iterator();
		
--COLLECTION_SUBSTITUTION--		
	}

	public void add(--COLUMN_PARAMS--){
--BUILDER_ADDITION--
	}
	
	public RowIterator<--COLUMNS--> getIterator() {
		return new RowIterator<--COLUMNS-->(--BUILDER_ITERATORS--);
	}
	
	public byte[] toBytes() throws IOException {
		
		Collection<byte[]> allCols = new ArrayList<byte[]>(--COLUMN_SIZE--); 
--COLUMN_ADDITION--		
		return SortedBytesArray.getInstance().toBytes(allCols);
	}
}	